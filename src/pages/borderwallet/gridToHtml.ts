import moment from 'moment'
import { GridType } from '../../bitcoin/utilities/Interface'
import { columns } from './BorderWalletGridScreen'

const tribeLogo = `
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="14" height="14" viewBox="0 0 163 196" version="1.1">
<g id="surface1">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 100.351562 195.976562 L 53.863281 195.976562 C 52.128906 195.976562 50.71875 194.574219 50.714844 192.839844 L 50.714844 175.300781 C 50.71875 173.566406 52.128906 172.164062 53.863281 172.164062 L 100.558594 172.164062 C 100.589844 172.164062 100.617188 172.164062 100.644531 172.171875 L 101.902344 172.183594 C 105.335938 172.183594 108.761719 171.804688 112.117188 171.054688 C 115.4375 170.316406 118.667969 169.214844 121.75 167.769531 C 126.859375 165.121094 131.011719 160.945312 133.625 155.820312 C 133.625 155.8125 133.628906 155.8125 133.628906 155.804688 C 137.054688 149.160156 138.773438 141.765625 138.628906 134.289062 L 138.628906 134.164062 C 138.777344 126.773438 137.0625 119.464844 133.644531 112.910156 L 133.617188 112.855469 C 131.027344 107.65625 126.828125 103.433594 121.640625 100.816406 C 115.558594 97.957031 108.917969 96.46875 102.195312 96.460938 C 101.722656 96.460938 101.242188 96.46875 100.769531 96.484375 L 53.863281 96.484375 C 52.128906 96.488281 50.71875 95.085938 50.714844 93.347656 L 50.714844 75.808594 C 50.722656 74.074219 52.128906 72.671875 53.863281 72.675781 L 99.488281 72.675781 C 99.515625 72.671875 99.542969 72.675781 99.570312 72.679688 L 100.429688 72.6875 C 102.664062 72.691406 104.890625 72.449219 107.070312 71.964844 C 109.199219 71.5 111.265625 70.792969 113.230469 69.863281 C 116.425781 68.1875 119.03125 65.582031 120.703125 62.386719 C 121.699219 60.179688 122.46875 57.878906 123 55.515625 C 123.550781 53.097656 123.863281 50.632812 123.933594 48.15625 C 123.859375 45.722656 123.546875 43.304688 123 40.933594 C 122.441406 38.535156 121.648438 36.191406 120.636719 33.945312 C 118.96875 30.78125 116.3125 28.242188 113.078125 26.71875 C 111.195312 25.839844 109.207031 25.210938 107.164062 24.847656 C 104.632812 24.394531 102.0625 24.179688 99.488281 24.199219 L 53.867188 24.199219 C 52.132812 24.203125 50.722656 22.800781 50.71875 21.066406 L 50.71875 3.152344 C 50.722656 1.421875 52.132812 0.0195312 53.867188 0.0195312 L 99.441406 0.0195312 C 99.929688 0 100.429688 -0.00390625 100.921875 -0.00390625 C 109.15625 0.0234375 117.265625 2.007812 124.585938 5.78125 C 124.597656 5.78125 124.613281 5.789062 124.621094 5.796875 C 132.074219 9.71875 138.148438 15.832031 142.015625 23.3125 C 146.15625 30.992188 148.265625 39.597656 148.148438 48.316406 C 148.097656 56.933594 146.011719 65.421875 142.058594 73.082031 C 141 75.3125 139.714844 77.425781 138.21875 79.386719 C 137.609375 80.183594 136.964844 80.964844 136.285156 81.710938 C 140.320312 84.019531 143.992188 86.914062 147.175781 90.300781 C 150.5 93.828125 153.261719 97.84375 155.363281 102.207031 C 160.242188 112.136719 162.800781 123.039062 162.851562 134.097656 L 162.851562 134.109375 C 162.835938 145.3125 160.277344 156.363281 155.367188 166.433594 C 151.132812 175.214844 144.292969 182.476562 135.777344 187.226562 C 125.808594 192.976562 114.507812 196.003906 103 196.011719 Z M 53.863281 192.839844 L 100.414062 192.839844 C 101.273438 192.878906 102.140625 192.878906 102.996094 192.878906 C 113.957031 192.871094 124.722656 189.984375 134.214844 184.503906 L 134.957031 184.078125 L 134.214844 184.503906 C 124.722656 189.980469 113.957031 192.867188 102.996094 192.871094 C 102.136719 192.871094 101.273438 192.871094 100.417969 192.839844 Z M 118.5 172.480469 C 113.167969 174.359375 107.554688 175.316406 101.902344 175.316406 C 107.554688 175.320312 113.167969 174.359375 118.5 172.480469 Z M 136.433594 157.226562 C 134.433594 161.148438 131.617188 164.59375 128.171875 167.335938 C 131.617188 164.59375 134.4375 161.148438 136.441406 157.230469 C 137.5625 155.039062 138.515625 152.765625 139.292969 150.429688 C 138.515625 152.765625 137.558594 155.035156 136.433594 157.226562 Z M 152.527344 165.066406 C 157.234375 155.421875 159.683594 144.839844 159.695312 134.109375 C 159.683594 144.839844 157.234375 155.421875 152.527344 165.066406 Z M 141.777344 134.214844 C 141.777344 134.34375 141.78125 134.464844 141.785156 134.589844 C 141.785156 134.46875 141.78125 134.34375 141.777344 134.214844 Z M 159.695312 134.109375 C 159.648438 123.519531 157.199219 113.082031 152.527344 103.578125 C 157.195312 113.082031 159.644531 123.523438 159.695312 134.109375 Z M 136.433594 111.449219 C 137.035156 112.589844 137.585938 113.753906 138.085938 114.941406 C 137.585938 113.757812 137.035156 112.59375 136.433594 111.457031 C 135.699219 109.988281 134.847656 108.582031 133.882812 107.25 C 134.84375 108.578125 135.699219 109.984375 136.433594 111.449219 Z M 53.863281 93.34375 Z M 101.289062 93.328125 C 101.59375 93.324219 101.894531 93.320312 102.195312 93.320312 C 101.894531 93.320312 101.59375 93.324219 101.289062 93.328125 Z M 139.230469 71.691406 C 138.316406 73.636719 137.207031 75.484375 135.921875 77.207031 C 137.207031 75.484375 138.316406 73.640625 139.230469 71.695312 C 141.097656 68.089844 142.53125 64.273438 143.5 60.332031 C 142.527344 64.273438 141.09375 68.085938 139.230469 71.691406 Z M 100.4375 75.820312 C 100.277344 75.820312 100.113281 75.816406 99.949219 75.816406 C 100.113281 75.816406 100.277344 75.820312 100.4375 75.820312 Z M 53.867188 21.058594 L 99.488281 21.058594 C 111.601562 21.058594 119.269531 24.777344 123.464844 32.546875 C 125.699219 37.453125 126.929688 42.757812 127.082031 48.148438 C 126.925781 42.757812 125.699219 37.453125 123.464844 32.542969 C 119.269531 24.777344 111.601562 21.054688 99.488281 21.054688 L 53.867188 21.054688 Z M 144.695312 42.160156 C 144.023438 36.324219 142.292969 30.660156 139.589844 25.445312 C 142.292969 30.660156 144.019531 36.324219 144.691406 42.160156 Z M 138.433594 23.304688 C 138.191406 22.882812 137.9375 22.457031 137.683594 22.046875 L 138.429688 23.304688 Z M 137.351562 21.53125 L 137.011719 21.015625 Z M 137.007812 21.003906 C 135.605469 18.910156 133.992188 16.960938 132.199219 15.1875 C 133.992188 16.964844 135.601562 18.914062 137.007812 21.007812 Z M 119.738281 6.96875 C 113.785156 4.453125 107.386719 3.148438 100.921875 3.132812 C 100.441406 3.132812 99.96875 3.132812 99.488281 3.152344 C 99.964844 3.140625 100.441406 3.132812 100.917969 3.132812 C 107.382812 3.152344 113.777344 4.457031 119.730469 6.972656 Z M 15.054688 156.335938 C 9.152344 153.832031 4.449219 149.132812 1.941406 143.234375 C -1.964844 134.015625 0.125 123.347656 7.226562 116.285156 C 15.976562 107.53125 29.863281 106.632812 39.667969 114.183594 C 49.476562 121.734375 52.148438 135.386719 45.917969 146.078125 C 39.671875 156.769531 26.460938 161.160156 15.054688 156.335938 Z M 46.160156 133.675781 Z M 3.152344 133.675781 Z M 3.582031 47.78125 C 3.578125 44.972656 4.140625 42.191406 5.234375 39.601562 C 6.292969 37.105469 7.8125 34.835938 9.71875 32.910156 C 9.726562 32.898438 9.738281 32.894531 9.742188 32.886719 C 11.671875 30.976562 13.949219 29.457031 16.449219 28.402344 C 24.996094 24.804688 34.894531 27.230469 40.8125 34.371094 C 46.726562 41.515625 47.265625 51.6875 42.132812 59.414062 C 37.003906 67.140625 27.414062 70.59375 18.535156 67.910156 C 9.65625 65.230469 3.578125 57.050781 3.582031 47.777344 Z M 24.65625 65.675781 C 25.792969 65.675781 26.929688 65.570312 28.046875 65.355469 C 25.804688 65.78125 23.503906 65.78125 21.265625 65.355469 C 22.382812 65.570312 23.515625 65.679688 24.652344 65.679688 Z M 11.960938 35.109375 C 8.613281 38.476562 6.730469 43.03125 6.730469 47.777344 C 6.734375 43.027344 8.613281 38.472656 11.964844 35.109375 Z M 42.574219 47.777344 C 42.578125 45.386719 42.097656 43.019531 41.164062 40.816406 C 42.097656 43.019531 42.578125 45.390625 42.570312 47.785156 Z M 15.445312 32.414062 C 18.230469 30.757812 21.414062 29.882812 24.65625 29.886719 C 21.410156 29.882812 18.226562 30.761719 15.441406 32.421875 Z M 15.445312 32.414062 "/>
</g>
</svg>`

export const generateGridHtmlString = ( array, mnemonic, gridType = GridType.WORDS ) => {
  const data = [ ...array ]
  let htmlTable1 = '<table>'
  let htmlTable2 = '<table>'

  let tableHeader = '<tr><th> </th>'
  columns.forEach( ( col ) => {
    tableHeader += `<th>${col}</th>`
  } )
  tableHeader += '<th> </th></tr>'
  htmlTable1 += tableHeader
  htmlTable2 += tableHeader

  const table1 = data.slice( 0, data.length / 2 )
  const table2 = data.slice( data.length / 2, data.length )

  for ( let i = 0; i < table1.length; i++ ) {
    if ( i % 16 === 0 ) {
      if ( i !== 0 ) {
        htmlTable1 += `<th>${( '000' + ( i / 16 ) ).substr( -3 )}</th></tr>`
      }
      htmlTable1 += `<tr><th>${( '000' + ( ( i / 16 )+1 ) ).substr( -3 )}</th>`
    }
    htmlTable1 += '<td>' + table1[ i ].slice( 0, 4 ) + '</td>'
  }

  for ( let i = 0; i < table2.length; i++ ) {
    if ( i % 16 === 0 ) {
      if ( i !== 0 ) {
        htmlTable2 += `<th>${( '000' + ( ( i / 16 )+ 64 ) ).substr( -3 )}</th></tr>`
      }
      htmlTable2 += `<tr><th>${( '000' + ( ( i / 16 )+ 65 ) ).substr( -3 )}</th>`
    }
    htmlTable2 += '<td>' + table2[ i ].slice( 0, 4 ) + '</td>'
  }

  htmlTable1 += `<th>064</th></tr>${tableHeader}</table>`
  htmlTable2 += `<th>128</th></tr>${tableHeader}</table>`
  const html = `
  <!DOCTYPE html>
<html>
<head>
<style>
* {
  font-family: monospace;
}
p, h4 {
font-size: 10px;
text-align: center;
margin: 0;
}
table {
border-collapse: collapse;
width: 100%;
font-size: 8.5px;
text-align: center;
margin: 0;
}
tr {
  margin: 0;
}
th, td {
border: 0.8px solid gray;
padding: 0.1;
margin: 0;
}
th {
background-color: #f2f2f2;
}
@media print {
.pagebreak { page-break-before: always; } /* page-break-after works, as well */
}
</style>
</head>
<body>
<h4>${tribeLogo}Bitcoin Tribe Border Wallets  Grid Type: ${gridType.toLocaleLowerCase()}  Date: ${moment().format( 'DD/MM/YY • hh:MMa' )}</h4>
${htmlTable1}
<p>Recovery Phrase: ${mnemonic}</p>
<div class="pagebreak"> </div>
<h4>${tribeLogo}itcoin Tribe Border Wallets  Grid Type: ${gridType.toLocaleLowerCase()}  Date: ${moment().format( 'DD/MM/YY • hh:MMa' )}</h4>
${htmlTable2}
<p>Recovery Phrase: ${mnemonic}</p>
</body>
</html>`

  return html
}
